import { CronJob } from 'cron';
import { logger } from '../config/logger';
import {
    supplierCommunicationQueue,
    trackingQueue,
    whatsappQueue
} from '../config/queues';

/**
 * Configura√ß√£o de jobs agendados (cron jobs)
 */
export function setupScheduledJobs() {
  logger.info('‚è∞ Configurando jobs agendados...');

  // Sincroniza√ß√£o de rastreamento a cada 4 horas
  new CronJob('0 */4 * * *', async () => {
    try {
      logger.info('üîÑ Adicionando job de sincroniza√ß√£o de rastreamento');

      await trackingQueue.add('syncWithCorreios', {
        trackingCode: 'BR123456789'
      }, {
        priority: 3,
        attempts: 3
      });

      logger.info('‚úÖ Job de sincroniza√ß√£o adicionado √† fila');
    } catch (error) {
      logger.error('‚ùå Erro na sincroniza√ß√£o agendada:', error);
    }
  }, null, true, 'America/Sao_Paulo');

  // Detec√ß√£o de pedidos atrasados diariamente √†s 9h
  new CronJob('0 9 * * *', async () => {
    try {
      logger.info('üîç Iniciando detec√ß√£o de pedidos atrasados');

      await trackingQueue.add('detectDelayedOrders', {
        maxDeliveryDays: 10
      }, {
        priority: 2,
        attempts: 3
      });

      logger.info('‚úÖ Job de detec√ß√£o de atrasos adicionado');
    } catch (error) {
      logger.error('‚ùå Erro na detec√ß√£o de atrasos:', error);
    }
  }, null, true, 'America/Sao_Paulo');

  // Sincroniza√ß√£o de estoque com fornecedores a cada 6 horas
  new CronJob('0 */6 * * *', async () => {
    try {
      logger.info('üìä Iniciando sincroniza√ß√£o de estoque');

      await supplierCommunicationQueue.add('syncSupplierInventory', {
        supplierId: 'all'
      }, {
        priority: 3,
        attempts: 3
      });

      logger.info('‚úÖ Job de sincroniza√ß√£o de estoque adicionado');
    } catch (error) {
      logger.error('‚ùå Erro na sincroniza√ß√£o de estoque:', error);
    }
  }, null, true, 'America/Sao_Paulo');

  // Envio de lembretes de avalia√ß√£o (3 dias ap√≥s entrega)
  new CronJob('0 10 * * *', async () => {
    try {
      logger.info('‚≠ê Enviando lembretes de avalia√ß√£o');

      await whatsappQueue.add('sendReviewReminder', {
        orderId: 'delivered-orders-check',
        customerPhone: '+5511999999999',
        customerName: 'Cliente Teste',
        orderNumber: 'TEST-001'
      }, {
        priority: 4,
        attempts: 2
      });

      logger.info('‚úÖ Job de lembrete de avalia√ß√£o adicionado');
    } catch (error) {
      logger.error('‚ùå Erro no envio de lembretes:', error);
    }
  }, null, true, 'America/Sao_Paulo');

  // Monitoramento de performance dos fornecedores (semanal - segunda √†s 8h)
  new CronJob('0 8 * * 1', async () => {
    try {
      logger.info('üìä Monitoramento semanal de fornecedores');

      await supplierCommunicationQueue.add('monitorSupplierPerformance', {
        supplierId: 'all',
        period: '7d'
      }, {
        priority: 2,
        attempts: 3
      });

      logger.info('‚úÖ Job de monitoramento de fornecedores adicionado');
    } catch (error) {
      logger.error('‚ùå Erro no monitoramento de fornecedores:', error);
    }
  }, null, true, 'America/Sao_Paulo');

  // Relat√≥rio di√°rio de tracking (todos os dias √†s 18h)
  new CronJob('0 18 * * *', async () => {
    try {
      logger.info('üìä Gerando relat√≥rio di√°rio de rastreamento');

      await trackingQueue.add('generateTrackingReport', {
        startDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        endDate: new Date().toISOString(),
        format: 'json'
      }, {
        priority: 2,
        attempts: 3
      });

      logger.info('‚úÖ Job de relat√≥rio di√°rio adicionado');
    } catch (error) {
      logger.error('‚ùå Erro na gera√ß√£o de relat√≥rio:', error);
    }
  }, null, true, 'America/Sao_Paulo');

  // Monitoramento de performance de entrega (di√°rio √†s 20h)
  new CronJob('0 20 * * *', async () => {
    try {
      logger.info('üìà Monitoramento de performance de entrega');

      await trackingQueue.add('monitorDeliveryPerformance', {
        period: '30d'
      }, {
        priority: 2,
        attempts: 3
      });

      logger.info('‚úÖ Job de monitoramento de performance adicionado');
    } catch (error) {
      logger.error('‚ùå Erro no monitoramento de performance:', error);
    }
  }, null, true, 'America/Sao_Paulo');

  logger.info('‚úÖ Jobs agendados configurados com sucesso');
}

/**
 * Fun√ß√£o para parar todos os jobs agendados
 */
export function stopScheduledJobs() {
  logger.info('‚èπÔ∏è Parando jobs agendados...');
  // A implementa√ß√£o espec√≠fica dependeria de como estamos armazenando as refer√™ncias dos CronJobs
  logger.info('‚úÖ Jobs agendados parados');
}
